//verse.js
//2014 - 2015

/*global createjs */

'use strict';

var notes = ['e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b', 'c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b', 'c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b', 'c', 'c#', 'd', 'd#', 'e'];

var config = {
  maxDotFactor: 60 / 500000,
  maxMouseDistance: 100,
  maxContactDistance: 50,
  contactTimeout: 400,
  contactVelocityFactor: 0.5,
  dotSpeedThreshold: 10,
  dotDeceleration: 0.99,
  fadeFactor: 0.05,
  chordChangeTimeout: 5000,
  dotAddRemoveTimeout: 100,
  noteTriggerTimeout: 50,
  chordList: ['e, c, g', 'e, b, g']
};

var audio = {
  actives: [],
  pool: []
};

var maxDotCount = 1;

var dots = [];

var lastMouse = {
  x: 0,
  y: 0
};

var chordChangeTimeout = 0;
var dotAddRemoveTimeout = 0;
var noteTriggerTimeout = 0;
var chordIndex = 0;
var scale = [];

var fadeRect = null;
var canvas = null;
var stage = null;
var drawingCanvas = null;

function init() {
  canvas = document.getElementById('mainCanvas');

  stage = new createjs.Stage(canvas);
  stage.autoClear = false;
  stage.enableDOMEvents(true);

  createjs.Touch.enable(stage);

  createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;
  createjs.Ticker.setFPS(60);

  canvas.setAttribute('style', 'background-color: #000000');

  drawingCanvas = new createjs.Shape();
  stage.addChild(drawingCanvas);

  fadeRect = new createjs.Shape();
  stage.addChild(fadeRect);

  setChord(chordIndex);

  //audio stuff.
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
  if (!window.AudioContext) {
    console.log('audio api not available!');
    //TODO: do something smart to handle the api not being available.
  } else {
    audio.ctx = new AudioContext();
  }

  window.addEventListener('resize', onResize);
  onResize();
  stage.addEventListener('stagemousemove', onMouseMove);
  createjs.Ticker.addEventListener('tick', onTick);
}

function onResize() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  fadeRect.graphics.clear().beginFill('rgba(0,0,0,' + config.fadeFactor + ')').rect(0, 0, canvas.width, canvas.height);

  maxDotCount = Math.round(config.maxDotFactor * canvas.width * canvas.height);
  console.log('maxDotCount: ' + maxDotCount);
}

//TODO: should be okay to not use our delta time everywhere because our ticker
//mode is RAF_SYNCHED, but we should do it anyway.
function onTick(event) {
  tickTones(event.delta);
  chordChangeTimeout -= event.delta;
  dotAddRemoveTimeout -= event.delta;
  noteTriggerTimeout -= event.delta;

  var dMouseX = stage.mouseX - lastMouse.x;
  var dMouseY = stage.mouseY - lastMouse.y;

  if (dotAddRemoveTimeout < 0) {
    dotAddRemoveTimeout = config.dotAddRemoveTimeout;
    if (dots.length < maxDotCount) {
      addDot();
      console.log('adding... ' + dots.length);
    } else if (dots.length > maxDotCount) {
      dots.pop();
      console.log('removing... ' + dots.length);
    }
  }

  var g = drawingCanvas.graphics;

  g.clear().setStrokeStyle(1).beginStroke('#ffffff');

  var wasNotePlayed = false;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = dots[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var dot = _step.value;

      g.moveTo(dot.x, dot.y);
      dot.x += dot.velocity.x;
      dot.y += dot.velocity.y;
      g.lineTo(dot.x, dot.y);

      wrapToStage(dot);

      dot.contactTimeout -= event.delta;

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = dots[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var otherDot = _step2.value;

          if (otherDot === dot) {
            continue;
          }

          var dx = dot.x - otherDot.x;
          var dy = dot.y - otherDot.y;
          var dist = Math.sqrt(dx * dx + dy * dy);

          if (dist > config.maxContactDistance) {
            continue;
          }

          if (dist > 0) {
            var vf = config.contactVelocityFactor;
            dot.velocity.x += vf * dx / dist;
            dot.velocity.y += vf * dy / dist;
            otherDot.velocity.x -= vf * dx / dist;
            otherDot.velocity.y -= vf * dy / dist;
          }

          if (dot.contactTimeout < 0) {
            dot.contactTimeout = config.contactTimeout;

            g.moveTo(dot.x, dot.y).lineTo(otherDot.x, otherDot.y);

            if (!wasNotePlayed && noteTriggerTimeout < 0) {
              wasNotePlayed = true;
              noteTriggerTimeout = config.noteTriggerTimeout;

              var avgYPos = (dot.y + otherDot.y) / 2;
              var indScale = Math.round(Math.random() * 2) * 2 - 1 + scale.length - 1 - Math.round(scale.length * avgYPos / canvas.height);
              indScale = clamp(indScale, 0, scale.length - 1);

              var avgXPos = (dot.x + otherDot.x) / 2;
              var pan = avgXPos / (canvas.width * 0.5) - 1;

              var avgXVel = (Math.abs(dot.velocity.x) + Math.abs(otherDot.velocity.x)) / 2;
              var avgYVel = (Math.abs(dot.velocity.y) + Math.abs(otherDot.velocity.y)) / 2;

              var avgVelocity = Math.sqrt(avgXVel * avgXVel + avgYVel * avgYVel);
              avgVelocity = clamp(avgVelocity, 0, config.dotSpeedThreshold);

              var volume = 0.2 + 0.8 * (avgVelocity / config.dotSpeedThreshold);

              var note = scale[indScale];

              addTone(note, pan, volume);
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      //done iterating through other dots.

      var dX = dot.x - stage.mouseX;
      var dY = dot.y - stage.mouseY;

      var distMouse = Math.sqrt(dX * dX + dY * dY);

      if (distMouse < config.maxMouseDistance) {
        dot.velocity.x += 0.001 * (config.maxMouseDistance - distMouse) * dMouseX;
        dot.velocity.y += 0.001 * (config.maxMouseDistance - distMouse) * dMouseY;
      }

      var speed = Math.sqrt(dot.velocity.x * dot.velocity.x + dot.velocity.y * dot.velocity.y);
      if (speed > config.dotSpeedThreshold) {
        dot.velocity.x = config.dotSpeedThreshold * dot.velocity.x / speed;
        dot.velocity.y = config.dotSpeedThreshold * dot.velocity.y / speed;
      }

      dot.velocity.x *= config.dotDeceleration;
      dot.velocity.y *= config.dotDeceleration;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  lastMouse.x = stage.mouseX;
  lastMouse.y = stage.mouseY;

  stage.update();
}

function tickTones(delta) {
  var toDequeue = 0;

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = audio.actives[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var tone = _step3.value;

      tone.duration -= delta;

      if (tone.duration < 0) {
        //see hack below -- if we stop the oscillator, it seems to get GC'd in Firefox right now.
        tone.osc.stop(0);
        //tone.gain.gain.value = 0
        toDequeue++;
      } else {
        var frac = tone.duration / tone.initDuration * tone.volume;
        //let's use exponential instead of linear gain.
        tone.gain.gain.value = frac * frac;
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3['return']) {
        _iterator3['return']();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  while (toDequeue > 0) {
    //actives should be ordered by duration, so we can just shift from the front to dequeue them.
    audio.actives.shift();
    //audio.pool.push()
    toDequeue--;
  }
}

//TODO: handle pan using a PannerNode
function addTone(note, pan, volume) {
  if (audio.actives.length > 8) {
    return;
  }
  //tone = audio.pool.pop()
  var tone = null;
  if (!tone) {
    var osc = audio.ctx.createOscillator();
    osc.type = 'sine';

    var gain = audio.ctx.createGain();
    osc.connect(gain);

    gain.connect(audio.ctx.destination);
    tone = {
      osc: osc,
      gain: gain
    };
    //HACK: start the oscillator on initialization and never stop it,
    //since it seems to get erroneously GC'd or messed up otherwise?
  }

  tone.duration = 1000;
  tone.initDuration = tone.duration;

  tone.volume = volume;
  tone.gain.gain.value = tone.volume;

  tone.osc.frequency.value = 440 * Math.pow(2, note / 12 - 1);

  tone.osc.start(0);

  audio.actives.push(tone);
}

function onMouseMove(event) {
  if (chordChangeTimeout < 0) {
    chordIndex = (chordIndex + 1) % config.chordList.length;
    setChord(chordIndex);
  }

  chordChangeTimeout = config.chordChangeTimeout;
}

function setChord(index) {
  var chordNotes = config.chordList[index];

  scale = [];

  notes.forEach(function (note, i) {
    if (chordNotes.indexOf(note) !== -1) {
      scale.push(i);
    }
  });
}

function addDot() {
  var dot = new createjs.Point(Math.random() * canvas.width, Math.random() * canvas.height);

  dot.velocity = new createjs.Point(0, 0);
  dot.contactTimeout = config.contactTimeout;

  dots.push(dot);
}

function wrapToStage(dot) {
  if (dot.x < 0) {
    dot.x += canvas.width;
  } else if (dot.x > canvas.width) {
    dot.x -= canvas.width;
  }
  if (dot.y < 0) {
    dot.y += canvas.height;
  } else if (dot.y > canvas.height) {
    dot.y -= canvas.height;
  }
}

function clamp(val, min, max) {
  return Math.max(min, Math.min(max, val));
}

//# sourceMappingURL=data:application/json;base64,